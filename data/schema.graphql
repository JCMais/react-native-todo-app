input AddTodoInput {
  text: String!
  clientMutationId: String
}

type AddTodoPayload {
  todoEdge: TodoEdge
  viewer: User
  error: String
  clientMutationId: String
}

input ChangePasswordInput {
  oldPassword: String!

  # user new password
  password: String!
  clientMutationId: String
}

type ChangePasswordPayload {
  error: String
  viewer: User
  clientMutationId: String
}

input ChangeTodoTextInput {
  id: ID!
  text: String!
  clientMutationId: String
}

type ChangeTodoTextPayload {
  todo: Todo
  viewer: User
  error: String
  clientMutationId: String
}

input DeleteTodoInput {
  id: [ID!]
  clientMutationId: String
}

type DeleteTodoPayload {
  deletedId: [ID]
  viewer: User
  error: String
  clientMutationId: String
}

input LoginEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type LoginEmailPayload {
  token: String
  viewer: User
  error: String
  clientMutationId: String
}

type Mutation {
  RegisterEmail(input: RegisterEmailInput!): RegisterEmailPayload
  LoginEmail(input: LoginEmailInput!): LoginEmailPayload
  ChangePassword(input: ChangePasswordInput!): ChangePasswordPayload
  AddTodo(input: AddTodoInput!): AddTodoPayload
  ChangeTodoText(input: ChangeTodoTextInput!): ChangeTodoTextPayload
  ToggleTodoStatus(input: ToggleTodoStatusInput!): ToggleTodoStatusPayload
  DeleteTodo(input: DeleteTodoInput!): DeleteTodoPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# The root of all... queries
type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
}

input RegisterEmailInput {
  name: String!
  email: String!
  password: String!
  clientMutationId: String
}

type RegisterEmailPayload {
  token: String
  viewer: User
  error: String
  clientMutationId: String
}

# Todo data
type Todo implements Node {
  # The ID of an object
  id: ID!
  _id: String
  text: String
  completedAt: String
  color: String
  order: Int
}

# A connection to a list of items.
type TodoConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [TodoEdge]
  count: Int
}

# An edge in a connection.
type TodoEdge {
  # The item at the end of the edge
  node: Todo

  # A cursor for use in pagination
  cursor: String!
}

input ToggleTodoStatusInput {
  id: ID!
  completed: Boolean!
  clientMutationId: String
}

type ToggleTodoStatusPayload {
  todo: Todo
  viewer: User
  error: String
  clientMutationId: String
}

# User data
type User implements Node {
  # The ID of an object
  id: ID!
  _id: String
  name: String
  email: String
  active: Boolean
  todos(after: String, first: Int, before: String, last: Int, search: String, hideCompleted: Boolean = false): TodoConnection
}
